module userinput (clk, reset, key, out);

	input logic reset, key, clk;
	output logic out;	
	
	logic [1:0] ps;
	logic [1:0] ns;
	
	parameter [1:0] off = 1'b0, on = 1'b1;	
		
	always_comb 
		case(ps)
			off: begin  
				if(key)  
			       ns = off;
			  		out = 0;
			    else   
				         ns = on;
							out = 0;
		   end
				 
			on:begin  
			if (key)  
    		    ns = A;
	          out=1;
			else    
				 ns = B;
				 out = 0;
			end
				 
	  default ns = 1'bx;
		
		endcase
	
	always_ff @(posedge clk)
		if (reset)
			ps <= off;
		else
			ps <= ns;
			
endmodule

module userinput_testbench();
	logic key;
	logic clk, reset;
	logic out;
	
	userinput dut (clk, reset, key, out);
	
	// Set up the clock.
	 parameter CLOCK_PERIOD=100;
	initial begin
	clk <= 0;
	forever #(CLOCK_PERIOD/2) clk <= ~clk;
	end
	
	// Set up the inputs to the design. Each line is a clock cycle.
	initial begin
	reset <= 1; @(posedge clk);
	
	reset<=0; @(posedge clk);
	                    
	key <= 1; @(posedge clk);
	                 
	key <= 1; @(posedge clk);
	
	key <= 0; @(posedge clk); 
								
	key <= 1; @(posedge clk);
	
	key <= 0; @(posedge clk);

	key <= 1; @(posedge clk);
	
	key <= 0; @(posedge clk);

		$stop; // End the simulation.
	end
endmodule